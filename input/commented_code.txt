/*fmt.Printf("%d ", converted)
if (err != nil){
    fmt.Printf("%d ", converted)

} else {
    fmt.Printf("%s\n", err)
    fmt.Printf("%s\n", "FATAL ERROR COULDN'T CONVERT TO INTEGER")
}*/

/****************************************************************************************/

/*
tree := test_tree()
fmt.Println(tree.Search(400))
var test[] int
var count int = 0
test = tree.in_order_traversal(test, &count)
var hash int = tree.computeHash()
fmt.Printf("%v\n", test)
fmt.Printf("hash value: %d\n", hash)
*/

/****************************************************************************************/

/*
func run_sequential(input_file *string, bst_list *[]*Node, bst_hashmap *map[int][]int,
                   tree_equal *map[int][]int){
    
    file, err := os.Open(*input_file)
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()
    
    file_scanner := bufio.NewScanner(file)
    // optionally, resize scanner's capacity for lines over 64K ... needed?
    var bst_id int = 0
    for file_scanner.Scan() {
        var tree *Node;
        var s scanner.Scanner
        s.Init(strings.NewReader(file_scanner.Text()))
        var newBST bool = true
        for tok := s.Scan(); tok != scanner.EOF; tok = s.Scan() {
            var converted int;
            converted, _ = strconv.Atoi(s.TokenText())
            if newBST{
                tree = &Node{Value: converted}
                newBST = false
            } else {
                tree.Insert(converted)
            }
        }
        *bst_list = append(*bst_list, tree)
        var hash int = tree.computeHash() //todo: extract below to outside, iterate over list of trees with hash_workers
        (*bst_hashmap)[hash] = append((*bst_hashmap)[hash], bst_id)
        bst_id++
    }
    //iterate over hashmaps, if key > 1, compare trees inside
    
    var tree_group int = -1
    
    for hash, bstids := range *bst_hashmap {
        this_group_visited := make(map[int]bool)
        if (len(bstids) > 1) {
            fmt.Printf("Compare values in key: %d\n", hash)
            for i:=0; i < len(bstids); i++ {
                if (!this_group_visited[i]){
                    
                    //node hasn't been visited yet, create new group in tree
                    tree_group++
                    (*tree_equal)[tree_group] = append((*tree_equal)[tree_group], bstids[i])
                    
                    var node *Node = (*bst_list)[ bstids[i] ]
                    
                    this_group_visited[i] = true
                    for j:=i+1; j < len(bstids); j++ {
                        if (!this_group_visited[j]){
                            //next node hasn't been visited, compare with node
                            var next_node *Node = (*bst_list)[ bstids[j] ]
                            var equal bool = equalTrees(node, next_node)
                            if equal{
                                (*tree_equal)[tree_group] = append((*tree_equal)[tree_group], bstids[j])
                                this_group_visited[j] = true //grouped nextnode, remove it from iterations
                            }
                        }
                    }
                }
            }
        }// else no need to print groups with only one tree
    }
}
*/

func (n *Node) Search (value int) bool {
    
    if (n==nil){
        return false
    }
    if (value > n.Value) {
        //MOVE RIGHT, value larger
        return n.Right.Search(value)
    } else if (value < n.Value) {
        return n.Left.Search(value)
    }
    return true
}

func identicalTrees(a *Node, b *Node) bool {
    //TODO: test for empty trees!
    /*1. both empty */
    if (a == nil && b == nil) {
        return true
    }
    
    /* 2. both non-empty -> compare them */
    if (a.Value==b.Value) {
        if (identicalTrees(a.Left, b.Left) && identicalTrees(a.Right, b.Right)){
            return true
        }
    }
    /* 3. one empty, one not -> false */
    return false
}